<xmi:XMI xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.2/notation" xmlns:sgraph="http://www.yakindu.org/sct/sgraph/2.0.0" xmi:version="2.0">
  <sgraph:Statechart xmi:id="_FFik0CoLEee0mqFmHUZWcA" specification="interface:&#10;&#9;//LSA specific&#10;&#9;operation goToEntryPoint()&#10;&#9;var cylinderToPut : integer&#10;&#10;&#9;//HMI interface&#10;&#9;operation beep(nb : integer)&#10;&#9;operation led1(blink : integer)&#10;&#9;operation led2(blink : integer)&#10;&#9;operation led3(blink : integer)&#10;&#9;operation led4(blink : integer)&#10;&#9;operation ledRGB(color : integer, blink : integer)&#10;&#9;operation logDebug(msg : string)&#10;&#9;operation logInfo(msg : string)&#10;&#9;operation logError(msg : string)&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;//General&#10;&#9;operation dieMotherFucker()&#10;&#9;operation xav() : integer&#10;&#9;operation xar() : integer&#10;&#9;operation yside() : integer&#10;&#9;operation xavExtended() : integer&#10;&#9;operation xarExtended() : integer&#10;&#9;operation xouter() : integer&#10;&#9;operation setStatus(status : integer)&#10;&#9;operation matchColor() : boolean //use MC_PREF and MC_SYM constants to test result&#10;&#9;operation robotType() : boolean //use PEN and TRATION constants to test result&#10;&#9;operation isSimu() : boolean&#10;&#9;operation matchDuration() : integer //Duration from the begining of the match in msec.&#10;&#9;operation matchRemainingTime() : integer //Duration until the end of core match section in msec.&#10;&#9;&#10;&#9;//Navigation interface&#10;&#9;operation x(sym : boolean) : integer&#10;&#9;operation y(sym : boolean) : integer&#10;&#9;operation h(sym : boolean) : integer&#10;&#9;operation enableAvoidance(on : boolean)&#10;&#9;operation setPosition(x : real, y : real, h : real)&#10;&#9;operation setSpeedAcc(vMax : integer, vMaxTurn : integer, accMax : integer, accMaxTurn : integer)&#10;&#9;operation setAgonicMode()&#10;&#9;operation resetAgonicMode()&#10;&#9;operation goTo(x : real, y : real, dir : integer, sym : boolean)&#10;&#9;operation goToCap(x : real, y : real, h : real, dir : integer, sym : boolean)&#10;&#9;operation goForward(d : real)&#10;&#9;operation turnDelta(dh : real, sym : boolean)&#10;&#9;operation turnTo(h : real, sym : boolean)&#10;&#9;operation faceTo(x : real, y : real, sym : boolean)&#10;&#9;operation rearTo(x : real, y : real, sym : boolean)&#10;&#9;operation recalFace(border : integer)&#10;&#9;operation recalRear(border : integer)&#10;&#9;operation recalRearSpecial(border : integer, distance : integer)&#10;&#9;operation recalFaceSpecial(border : integer, distance : integer)&#10;&#9;operation graphTo(x : real, y : real, h : real, dir : integer)&#10;&#9;operation graphToID(id : integer, h : real, dir : integer)&#10;&#9;operation stopMoving()&#10;&#9;operation targetReached() : boolean&#10;&#9;operation blocked() : boolean&#10;&#9;&#10;&#9;//Detection interface&#10;&#9;operation omronFront() : boolean&#10;&#9;operation omronRear() : boolean&#10;&#9;operation omronLatLeft() : boolean&#10;&#9;operation omronLatRight() : boolean&#10;&#9;operation omronScan() : boolean&#10;&#9;operation isOpponentAhead() : boolean&#10;&#9;operation isOpponentBehind() : boolean&#10;&#9;operation isOpponentOnLeft() : boolean&#10;&#9;operation isOpponentOnRight() : boolean&#10;&#9;&#10;&#9;&#10;&#9;//Actuators interface&#10;&#9;operation armsReady() : boolean&#10;&#9;operation armsTimeout() : boolean&#10;&#9;operation armsBlocked() : boolean&#10;&#9;operation armCylinderTaken() : boolean&#10;&#9;operation actCmd(cmdId : integer)&#10;&#9;operation omronCylinder() : boolean&#10;&#9;operation stockColor(): integer&#10;&#9;operation rouleau(descendu : boolean)&#10;&#10;&#9;//Strategy model interface&#10;&#9;operation score() : integer&#10;&#9;operation robotStockCount() : integer&#10;&#9;operation nextCylinderColor() : integer&#10;&#9;operation containerCount(containerId : integer) : integer&#10;&#9;operation dispenserA_Count() : integer&#10;&#9;operation dispenserG_Count() : integer&#10;&#9;operation dispenserOppG_Count() : integer&#10;&#9;operation informWithdraw_A(nb: integer)&#10;&#9;operation informWithdraw_G(nb: integer)&#10;&#9;operation informWithdraw_OppG(nb: integer)&#10;&#9;operation informPooed_3(nb: integer)&#10;&#9;operation informPooed_4(nb: integer)&#10;&#9;operation informPooed_2(nb: integer)&#10;&#9;operation informPooed_5(nb: integer)&#10;&#9;operation informPooed_1(nb: integer)&#10;&#9;operation informPooed_6(nb: integer)&#10;&#9;operation informPooed_OnTable(nb: integer)&#10;&#9;operation informTaken_D()&#10;&#9;operation informTaken_F()&#10;&#9;operation informTaken_E()&#10;&#9;operation informTaken_B()&#10;&#9;operation informTaken_C()&#10;&#9;operation informTaken_Opp_D()&#10;&#9;operation informTaken_Opp_F()&#10;&#9;operation informTaken_Opp_E()&#10;&#9;operation informPushedAway_D()&#10;&#9;operation informPushedAway_F()&#10;&#9;operation informPushedAway_E()&#10;&#9;operation informPushedAway_B()&#10;&#9;operation informPushedAway_C()&#10;&#9;operation informPushedAway_Opp_D()&#10;&#9;operation informPushedAway_Opp_F()&#10;&#9;operation informPushedAway_Opp_E()&#10;&#9;&#10;internal:&#10;&#9;//general&#10;&#9;const MC_PREF : boolean = true&#10;&#9;const MC_SYM : boolean = false&#10;&#9;const PEN : boolean = true&#10;&#9;const TRATION : boolean = true&#10;&#9;&#10;&#9;//direction enum&#10;&#9;const FWD : integer =  1&#10;&#9;const BEST : integer =  0&#10;&#9;const BWD : integer = -1&#10;&#9;const SYM : boolean = true&#10;&#9;const NO_SYM : boolean = false&#10;&#9;&#10;&#9;//border enum&#10;&#9;const REFEREE_Y : integer = 1&#10;&#9;const B_CORNER_Y : integer = 2&#10;&#9;const BOT_Y : integer = 3&#10;&#9;const OWN_B_CORNER_X : integer = 11&#10;&#9;const OPP_B_CORNER_X : integer = 12&#10;&#9;const FLIP_FLOP_X : integer = 14&#10;&#9;const OWN_BORDER_3_X : integer = 15&#10;&#9;const OPP_BORDER_3_X : integer = 16&#10;&#9;const OWN_BORDER_5_X : integer = 17&#10;&#9;const OPP_BORDER_1_X : integer = 18&#10;&#9;&#10;&#9;//blink enum&#10;&#9;const LED_OFF : integer = 0&#10;&#9;const LED_ON : integer = 1&#10;&#9;const SLOW_BLINK : integer = 2&#10;&#9;const FAST_BLINK : integer = 3&#10;&#9;//color enum&#10;&#9;const ledRED : integer = 0&#10;&#9;const ledGREEN: integer = 1 &#9;&#9;&#10;&#9;const ledBLUE: integer = 2&#10;&#9;const ledYELLOW: integer = 3&#10;&#9;const ledCYAN: integer = 4&#9;&#9;&#10;&#9;const ledPURPLE: integer = 5 &#9;&#9;&#10;&#9;const ledWHITE: integer = 6&#10;&#9;&#10;&#9;//Cylinder rotation&#10;&#9;const cylUNKNOWN: integer = 0&#10;&#9;const cylYELLOW: integer = 1&#10;&#9;const cylBLUE: integer = 2&#10;&#9;const cylWHITE: integer = 3&#10;&#9;const cylNO_CMD: integer = 0&#10;&#9;const cylFAILED: integer = 1&#10;&#9;const cylOK: integer = 2&#10;&#9;&#9;&#10;&#9;//LSA status enum&#10;&#9;const NO_LSA : integer = 0&#10;&#9;const SUCCESS : integer = 1&#10;&#9;const FAILURE : integer = 2&#10;&#9;const IN_PROGRESS : integer = 3&#10;&#9;&#10;&#9;//LSA ID enum (Keep in sync with 0_Strategy2017.h::eLsaId)&#10;&#9;const LSA_A : integer = 0&#10;&#9;const LSA_G : integer = 1&#10;&#9;const LSA_OppG : integer = 2&#10;&#9;const LSA_1 : integer = 3&#10;&#9;const LSA_2 : integer = 4&#10;&#9;const LSA_3 : integer = 5&#10;&#9;const LSA_4 : integer = 6&#10;&#9;const LSA_5 : integer = 7&#10;&#9;const LSA_B : integer = 8&#10;&#9;const LSA_C : integer = 9&#10;&#9;const LSA_D : integer = 10&#10;&#9;const LSA_E : integer = 11&#10;&#9;const LSA_F : integer = 12&#10;&#9;const LSA_OppD : integer = 13&#10;&#9;const LSA_OppE : integer = 14&#10;&#9;const LSA_OppF : integer = 15&#10;&#9;const LSA_6 : integer = 16&#10;&#9;const LSA_IA : integer = 17&#10;&#9;&#10;&#9;//ACT CMD&#10;&#9;const AC_LIFTER_START : integer&#9;&#9;= 1&#10;&#9;const AC_LIFTER_STOP : integer&#9;&#9;= 2&#10;&#9;const AC_LIFTER_LIFT : integer&#9;&#9;= 3&#10;&#9;const AC_LIFTER_PREPARE_NEXT_TO_POO : integer&#9;= 4&#10;&#9;&#10;&#9;const AC_ARMS_START : integer&#9;&#9;= 11&#10;&#9;const AC_ARMS_STOP : integer&#9;&#9;= 12&#10;&#9;const AC_ARMS_SWALLOW : integer&#9;&#9;= 14&#10;&#9;const AC_ARMS_FASTPOO : integer&#9;&#9;= 15&#10;&#9;const AC_ARMS_POO : integer&#9;&#9;&#9;= 16&#10;&#9;const AC_ARMS_RETRACT&#9; : integer&#9;= 17&#10;&#9;const AC_ARMS_ROT_ENGAGE : integer&#9;= 18&#10;&#9;const AC_ARMS_ROT_RETRACT : integer = 19&#10;&#9;const AC_ARMS_DISPENSER : integer&#9;&#9;= 20&#10;" name="FSM_LSA_PooBorderOpp">
    <regions xmi:id="_FFjy8ioLEee0mqFmHUZWcA" name="main region">
      <vertices xsi:type="sgraph:Entry" xmi:id="_FFmPMyoLEee0mqFmHUZWcA">
        <outgoingTransitions xmi:id="_FFoEZSoLEee0mqFmHUZWcA" target="_FFm2RyoLEee0mqFmHUZWcA"/>
      </vertices>
      <vertices xsi:type="sgraph:State" xmi:id="_FFm2RyoLEee0mqFmHUZWcA" specification="entry/ logInfo(&quot;[LSA Poo Start] Engaging storing area&quot;)" name="Engage PooArea" incomingTransitions="_FFoEZSoLEee0mqFmHUZWcA">
        <outgoingTransitions xmi:id="_jwxCYCoTEee0mqFmHUZWcA" specification="after 500ms " target="_2d2-MCoUEee0mqFmHUZWcA"/>
      </vertices>
      <vertices xsi:type="sgraph:FinalState" xmi:id="_2d2-MCoUEee0mqFmHUZWcA" incomingTransitions="_jwxCYCoTEee0mqFmHUZWcA"/>
    </regions>
  </sgraph:Statechart>
  </xmi:XMI>